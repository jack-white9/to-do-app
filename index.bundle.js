(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>p});var r=t(15),o=t.n(r),a=t(645),s=t.n(a),i=t(667),c=t.n(i),A=new URL(t(239),t.b),d=s()(o()),l=c()(A);d.push([n.id,"@font-face {\n    font-family: 'Roboto';\n    src: url("+l+");\n}\n\n*{\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    font-family: 'Roboto', sans-serif;\n    color: white;\n}\n\nwrapper {\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    grid-template-rows: 1fr;\n    height: 100vh;\n}\n\n.projectContainer {\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n    background-color: #333332;\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    padding: 5vh 3vw;\n}\n\n.projectHeader {\n    color: #BB86FC;\n    font-size: 4vw;\n    font-weight: 100;\n    margin-bottom: 1vh;\n}\n\n.projectDivider {\n    border-top: 1px solid white;\n    width: 100%;\n}\n\n.projects, .addProject {\n    font-size: 2vw;\n    padding-top: 0.5em;\n    padding-left: 0.25em;\n    border-radius: 10px;\n    vertical-align: middle;\n}\n\n.projects:hover, .addProject:hover {\n    background-color: #393938;\n    cursor: pointer;\n}\n\n.addProject {\n    color: #BB86FC;\n\n}\n\n.tasksContainer {\n    background-color: #393938;\n    z-index: 0;\n    display: flex;\n    flex-direction: column;\n    padding: 5vh 3vw;\n}\n\n.tasksHeaderContainer {\n    display: grid;\n    grid-template-columns: 5fr 1fr;\n}\n\n.tasksHeader {\n    color: #BB86FC;\n    font-size: 4vw;\n    font-weight: 100;\n    margin-bottom: 1vh;\n}\n\n.edit {\n    justify-self: end;\n    align-self: end;\n    margin-bottom: 1vh;\n}\n\n.edit:hover {\n    color: #BB86FC;\n    cursor: pointer;\n}\n\n.tasksDivider {\n    border-top: 1px solid white;\n    width: 100%;\n}\n\n.tasksSubheader {\n    padding-top: 0.5em;\n    padding-bottom: 0.5em;\n    font-size: 2vw;\n    font-weight: 100;\n}\n\n.todoContainer {\n    font-size: 2vw;\n    padding: 8px;\n    margin: 0.25em 0;\n\n    display: grid;\n    grid-template-columns: 1fr 10fr 3fr;\n    \n    border: 2px solid white;\n    border-radius: 10px;\n}\n\n.todoContainer:hover {\n    background-color: #525252;\n    cursor: pointer;\n}\n\n.circle {\n    height: 0.75em;\n    width: 0.75em;\n    border: 2px solid white;\n    border-radius: 50%;\n    margin: 0.25em 0.4em;\n}\n\n.unchecked {\n    background-color: transparent;\n}\n\n.checked {\n    background-color: #03DAC5;\n}\n\n.todoTime {\n    justify-self: end;\n    align-self: center;\n    padding-right: 0.4em;\n    font-size: 1vw;\n}\n\n.addTask {\n    color: #BB86FC;\n    padding-top: 0.5em;\n    padding-right: 0.5em;\n    text-align: end;\n    font-size: 2vw;\n    border-radius: 10px;\n}\n\n.addTask:hover {\n    background-color: #525252;\n    cursor: pointer;\n}\n\n.addTodo {\n    font-family: 'Roboto', sans-serif;\n    border: 0.1em solid transparent;\n    border-bottom: 2px solid white;\n    font-size: 2vw;\n    background-color: transparent;\n    color: white;\n}\n\n.addTodo:focus {\n    outline: none;\n}\n\n.delete {\n    justify-self: flex-end;\n    margin-right: 10%;\n}\n\n.deleteProject {\n    font-size: 2vw;\n    justify-self: center;\n    align-self: center;\n}\n\n.delete:hover, .deleteProject:hover {\n    color: #03DAC5;\n    cursor: pointer;\n}\n\n.projectItemContainer {\n    display: grid;\n    grid-template-columns: 8fr 1fr;\n}\n\n.checked {\n    background-color: #03DAC5;\n}\n\n.taskInput, .projectInput {\n    background-color: transparent;\n    height: 100%;\n    border-bottom: 2px solid white;\n    border-top: 0.1px solid transparent;\n    border-left: 0.1px solid transparent;\n    border-right: 0.1px solid transparent;\n    color: white;\n    font-family: 'Roboto', sans-serif;\n    font-size: 2vw;\n}\n\n.taskInput:focus, .projectInput:focus {\n    outline: none;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,4CAA8B;AAClC;;AAEA;IACI,sBAAsB;IACtB,UAAU;IACV,SAAS;AACb;;AAEA;IACI,iCAAiC;IACjC,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,uBAAuB;IACvB,aAAa;AACjB;;AAEA;IACI,2CAA2C;IAC3C,yBAAyB;IACzB,UAAU;IACV,aAAa;IACb,sBAAsB;IACtB,gBAAgB;AACpB;;AAEA;IACI,cAAc;IACd,cAAc;IACd,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,2BAA2B;IAC3B,WAAW;AACf;;AAEA;IACI,cAAc;IACd,kBAAkB;IAClB,oBAAoB;IACpB,mBAAmB;IACnB,sBAAsB;AAC1B;;AAEA;IACI,yBAAyB;IACzB,eAAe;AACnB;;AAEA;IACI,cAAc;;AAElB;;AAEA;IACI,yBAAyB;IACzB,UAAU;IACV,aAAa;IACb,sBAAsB;IACtB,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,cAAc;IACd,cAAc;IACd,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,eAAe;IACf,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,2BAA2B;IAC3B,WAAW;AACf;;AAEA;IACI,kBAAkB;IAClB,qBAAqB;IACrB,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,gBAAgB;;IAEhB,aAAa;IACb,mCAAmC;;IAEnC,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,eAAe;AACnB;;AAEA;IACI,cAAc;IACd,aAAa;IACb,uBAAuB;IACvB,kBAAkB;IAClB,oBAAoB;AACxB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,oBAAoB;IACpB,cAAc;AAClB;;AAEA;IACI,cAAc;IACd,kBAAkB;IAClB,oBAAoB;IACpB,eAAe;IACf,cAAc;IACd,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,eAAe;AACnB;;AAEA;IACI,iCAAiC;IACjC,+BAA+B;IAC/B,8BAA8B;IAC9B,cAAc;IACd,6BAA6B;IAC7B,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,sBAAsB;IACtB,iBAAiB;AACrB;;AAEA;IACI,cAAc;IACd,oBAAoB;IACpB,kBAAkB;AACtB;;AAEA;IACI,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,8BAA8B;AAClC;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,8BAA8B;IAC9B,mCAAmC;IACnC,oCAAoC;IACpC,qCAAqC;IACrC,YAAY;IACZ,iCAAiC;IACjC,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB",sourcesContent:["@font-face {\n    font-family: 'Roboto';\n    src: url('./Roboto-Light.ttf');\n}\n\n*{\n    box-sizing: border-box;\n    padding: 0;\n    margin: 0;\n}\n\nbody {\n    font-family: 'Roboto', sans-serif;\n    color: white;\n}\n\nwrapper {\n    display: grid;\n    grid-template-columns: 1fr 2fr;\n    grid-template-rows: 1fr;\n    height: 100vh;\n}\n\n.projectContainer {\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n    background-color: #333332;\n    z-index: 1;\n    display: flex;\n    flex-direction: column;\n    padding: 5vh 3vw;\n}\n\n.projectHeader {\n    color: #BB86FC;\n    font-size: 4vw;\n    font-weight: 100;\n    margin-bottom: 1vh;\n}\n\n.projectDivider {\n    border-top: 1px solid white;\n    width: 100%;\n}\n\n.projects, .addProject {\n    font-size: 2vw;\n    padding-top: 0.5em;\n    padding-left: 0.25em;\n    border-radius: 10px;\n    vertical-align: middle;\n}\n\n.projects:hover, .addProject:hover {\n    background-color: #393938;\n    cursor: pointer;\n}\n\n.addProject {\n    color: #BB86FC;\n\n}\n\n.tasksContainer {\n    background-color: #393938;\n    z-index: 0;\n    display: flex;\n    flex-direction: column;\n    padding: 5vh 3vw;\n}\n\n.tasksHeaderContainer {\n    display: grid;\n    grid-template-columns: 5fr 1fr;\n}\n\n.tasksHeader {\n    color: #BB86FC;\n    font-size: 4vw;\n    font-weight: 100;\n    margin-bottom: 1vh;\n}\n\n.edit {\n    justify-self: end;\n    align-self: end;\n    margin-bottom: 1vh;\n}\n\n.edit:hover {\n    color: #BB86FC;\n    cursor: pointer;\n}\n\n.tasksDivider {\n    border-top: 1px solid white;\n    width: 100%;\n}\n\n.tasksSubheader {\n    padding-top: 0.5em;\n    padding-bottom: 0.5em;\n    font-size: 2vw;\n    font-weight: 100;\n}\n\n.todoContainer {\n    font-size: 2vw;\n    padding: 8px;\n    margin: 0.25em 0;\n\n    display: grid;\n    grid-template-columns: 1fr 10fr 3fr;\n    \n    border: 2px solid white;\n    border-radius: 10px;\n}\n\n.todoContainer:hover {\n    background-color: #525252;\n    cursor: pointer;\n}\n\n.circle {\n    height: 0.75em;\n    width: 0.75em;\n    border: 2px solid white;\n    border-radius: 50%;\n    margin: 0.25em 0.4em;\n}\n\n.unchecked {\n    background-color: transparent;\n}\n\n.checked {\n    background-color: #03DAC5;\n}\n\n.todoTime {\n    justify-self: end;\n    align-self: center;\n    padding-right: 0.4em;\n    font-size: 1vw;\n}\n\n.addTask {\n    color: #BB86FC;\n    padding-top: 0.5em;\n    padding-right: 0.5em;\n    text-align: end;\n    font-size: 2vw;\n    border-radius: 10px;\n}\n\n.addTask:hover {\n    background-color: #525252;\n    cursor: pointer;\n}\n\n.addTodo {\n    font-family: 'Roboto', sans-serif;\n    border: 0.1em solid transparent;\n    border-bottom: 2px solid white;\n    font-size: 2vw;\n    background-color: transparent;\n    color: white;\n}\n\n.addTodo:focus {\n    outline: none;\n}\n\n.delete {\n    justify-self: flex-end;\n    margin-right: 10%;\n}\n\n.deleteProject {\n    font-size: 2vw;\n    justify-self: center;\n    align-self: center;\n}\n\n.delete:hover, .deleteProject:hover {\n    color: #03DAC5;\n    cursor: pointer;\n}\n\n.projectItemContainer {\n    display: grid;\n    grid-template-columns: 8fr 1fr;\n}\n\n.checked {\n    background-color: #03DAC5;\n}\n\n.taskInput, .projectInput {\n    background-color: transparent;\n    height: 100%;\n    border-bottom: 2px solid white;\n    border-top: 0.1px solid transparent;\n    border-left: 0.1px solid transparent;\n    border-right: 0.1px solid transparent;\n    color: white;\n    font-family: 'Roboto', sans-serif;\n    font-size: 2vw;\n}\n\n.taskInput:focus, .projectInput:focus {\n    outline: none;\n}"],sourceRoot:""}]);const p=d},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(o[s]=!0)}for(var i=0;i<n.length;i++){var c=[].concat(n[i]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,o=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,o,a=[],s=!0,i=!1;try{for(t=t.call(n);!(s=(r=t.next()).done)&&(a.push(r.value),!e||a.length!==e);s=!0);}catch(n){i=!0,o=n}finally{try{s||null==t.return||t.return()}finally{if(i)throw o}}return a}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],s=o[3];if(!s)return a;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),A="/*# ".concat(c," */"),d=s.sources.map((function(n){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(n," */")}));return[a].concat(d).concat([A]).join("\n")}return[a].join("\n")}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},s=[],i=0;i<n.length;i++){var c=n[i],A=r.base?c[0]+r.base:c[0],d=a[A]||0,l="".concat(A," ").concat(d);a[A]=d+1;var p=t(l),u={css:c[1],media:c[2],sourceMap:c[3]};-1!==p?(e[p].references++,e[p].updater(u)):e.push({identifier:l,updater:o(u,r),references:1}),s.push(l)}return s}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var s=0;s<a.length;s++){var i=t(a[s]);e[i].references--}for(var c=r(n,o),A=0;A<a.length;A++){var d=t(a[A]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r=t.css,o=t.media,a=t.sourceMap;o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},239:(n,e,t)=>{n.exports=t.p+"8be2d1487420548b3b8d.ttf"}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),s=t.n(a),i=t(565),c=t.n(i),A=t(216),d=t.n(A),l=t(589),p=t.n(l),u=t(426),f={};f.styleTagTransform=p(),f.setAttributes=c(),f.insert=s().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=d(),e()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;class C{constructor(n,e){this.name=n,this.status=e}setStatus(n){this.status=n}}class h{constructor(n){this.name=n,this.tasks=[],this.tasks.push(new C("Vacuum the floor","unchecked")),this.tasks.push(new C("Do the dishes","unchecked")),this.tasks.push(new C("Fold the washing","unchecked"))}setTasks(n){this.tasks=n}getTasks(){return this.tasks}addTask(n,e){this.tasks.push(new C(n,e))}deleteTask(n){const e=this.tasks.indexOf(n);e>-1&&this.tasks.splice(e,1)}}class B{constructor(){this.projects=[],this.projects.push(new h("Chores"))}setProjects(n){this.projects=n}getProjects(){return this.projects}addProject(n){this.projects.push(new h(n))}deleteProject(n){for(let e=this.projects.length-1;e>=0;--e)if(this.projects[e].name===n){this.projects.splice(e,1);break}}}!function(){const n=document.createElement("wrapper");n.innerHTML+='\n    <container class="projectContainer">\n        <h1 class="projectHeader">Projects</h1>\n        <hr class="projectDivider"></hr>\n        <container class="projectListContainer"></container>\n        <p class="addProject">+ Add Project</p>\n    </container>\n    <container class="tasksContainer">\n        <container class="tasksHeaderContainer">\n            <h1 class="tasksHeader">Chores</h1>\n            <p class="edit">Edit</p>\n        </container>\n        <hr class="tasksDivider"></hr>\n        <h2 class="tasksSubheader"><i>Click a task to check it off.</i></h2>\n        <container class="todoListContainer"></container>\n        <p class="addTask">+ Add Task</p>\n    </container>\n',document.body.appendChild(n);const e=new B,t=document.querySelector(".projectListContainer"),r=e.getProjects().map((n=>`\n    <container class="projectItemContainer">\n        <p class="projects">${n.name}</p>\n        <p class="deleteProject">×</p> \n    </container>`)).join("");t.innerHTML+=r;const o=new h("Chores"),a=document.querySelector(".todoListContainer"),s=o.getTasks().map((n=>`\n    <container class="todoContainer">\n        <span class="circle"></span>\n        <p class="todoText">${n.name}</p>\n        <p class="delete">×</p> \n    </container>`)).join("");a.innerHTML+=s}(),function(){const n=new B,e=document.querySelector(".addProject"),t=document.querySelector(".projectListContainer"),r=document.querySelector(".todoListContainer"),o=document.querySelector(".tasksHeader");let a=o.innerHTML;function s(){const e=n.getProjects().map((n=>`\n            <container class="projectItemContainer">\n                <p class="projects">${n.name}</p>\n                <p class="deleteProject">×</p> \n            </container>`)).join("");t.innerHTML=e,document.querySelectorAll(".deleteProject").forEach((e=>{e.addEventListener("click",(()=>{n.deleteProject(e.parentNode.children[0].innerHTML),s()}))})),document.querySelectorAll(".projects").forEach((n=>{n.addEventListener("click",(()=>{i(n.innerHTML)}))}))}function i(e){const t=n.getProjects().filter((n=>n.name===e))[0],s=t.getTasks().map((n=>`\n            <container class="todoContainer">\n            <span class="circle"></span>\n            <p class="todoText">${n.name}</p>\n            <p class="delete">×</p> \n        </container>`)).join("");r.innerHTML=s,t.getTasks().forEach((n=>{"checked"===n.status&&document.querySelectorAll(".circle")[t.getTasks().indexOf(n)].classList.add("checked")})),o.innerHTML=e,a=o.innerHTML,document.querySelectorAll(".delete").forEach((e=>{e.addEventListener("click",(()=>{const t=n.getProjects().filter((n=>n.name===a))[0],r=t.getTasks().filter((n=>n.name===e.parentNode.children[1].innerHTML))[0];t.deleteTask(r),i(o.innerHTML)}))})),document.querySelectorAll(".todoContainer").forEach((e=>{e.addEventListener("click",(()=>{const t=n.getProjects().filter((n=>n.name===a))[0].getTasks().filter((n=>n.name===e.children[1].innerHTML))[0];"unchecked"===t.status?(t.setStatus("checked"),e.children[0].classList.toggle("checked")):"checked"===t.status&&(t.setStatus("unchecked"),e.children[0].classList.toggle("checked"))}))}))}e.addEventListener("click",(()=>{t.innerHTML+='\n        <container class="projectItemContainer">\n            <p class="projects"><input type="text" class="projectInput"></input></p>\n            <p class="deleteProject">×</p> \n        </container>';const e=document.querySelector(".projectInput");e.addEventListener("keydown",(t=>{"Enter"===t.key&&""!=e.value&&(n.addProject(e.value),s())}))})),document.querySelector(".addTask").addEventListener("click",(()=>{r.innerHTML+='\n        <container class="todoContainer">\n        <span class="circle"></span>\n        <p class="todoText"><input type="text" class="taskInput"></input></p>\n        <p class="delete">×</p> \n        ';const e=document.querySelector(".taskInput");e.addEventListener("keydown",(t=>{"Enter"===t.key&&""!=e.value&&(n.getProjects().filter((n=>n.name===o.innerHTML))[0].addTask(e.value,"unchecked"),i(o.innerHTML))}))})),s(),i(a)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,